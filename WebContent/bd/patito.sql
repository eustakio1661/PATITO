DROP DATABASE IF EXISTS patito;
CREATE DATABASE patito;

USE patito;

CREATE TABLE TIPOEMPLEADO(
  ID_TP     INT          PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(15)      NOT NULL UNIQUE
  );

CREATE TABLE EMPLEADO(
  ID_EM      INT          PRIMARY KEY AUTO_INCREMENT, 
  DNI   CHAR(8)      NOT NULL UNIQUE,
  NOMBRE    VARCHAR(50)  NOT NULL,
  APELLIDO    VARCHAR(50)  NOT NULL,
  TELEFONO  VARCHAR(10)  NOT NULL UNIQUE,
  CORREO VARCHAR(100) NOT NULL UNIQUE,
  USUARIO	 VARCHAR(50)  NOT NULL UNIQUE,
  CLAVE  VARCHAR(50)  NOT NULL UNIQUE,
  ID_TP	 	  INT		  NOT NULL,
  ESTADO      TINYINT         NOT NULL,
  IMAGEN 	VARCHAR(1000) 		NULL,
  FOREIGN KEY (ID_TP) REFERENCES TIPOEMPLEADO (ID_TP)
);

CREATE TABLE CLIENTE(
  ID_CLI     INT          PRIMARY KEY AUTO_INCREMENT, 
  DNI_CLI    CHAR(8)      NOT NULL UNIQUE,
  NOM_CLI    VARCHAR(50)  NOT NULL,
  APE_CLI    VARCHAR(50)  NOT NULL,
  TELEF_CLI  VARCHAR(10)  UNIQUE,
  ESTADO      TINYINT         NOT NULL
);

CREATE TABLE CATEGORIA(
  ID_CA     INT          PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(30)      NOT NULL UNIQUE
  );

CREATE TABLE PRODUCTOS(
  ID_PRO     INT    PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(100)      NOT NULL UNIQUE,
  PRECIO	DECIMAL(6,2) 		NOT NULL CHECK (PRECIO >0),
  CANTIDAD	TINYINT 			NOT NULL CHECK(CANTIDAD >=0),
  ID_CA 	INT		NOT NULL ,
  IMAGEN 	VARCHAR(1000) 		NULL,
  FOREIGN KEY (ID_CA) REFERENCES CATEGORIA (ID_CA)
);

CREATE TABLE PEDIDO(
  ID_PE     INT    		AUTO_INCREMENT, 
  ID_EM		INT       NOT NULL,
  ID_CLI	INT       NOT NULL,
  FECHA_PE	DATE 	NOT NULL,
  FECHA_EN	DATE	NULL,
  CANTIDAD_TOTAL	TINYINT 			NOT NULL CHECK(CANTIDAD_TOTAL >=0),
  PRIMARY KEY (ID_PE, ID_EM,ID_CLI),
  FOREIGN KEY (ID_EM) REFERENCES EMPLEADO (ID_EM),
  FOREIGN KEY (ID_CLI) REFERENCES CLIENTE (ID_CLI)
);
CREATE TABLE DETALLE_PEDIDO(
  ID_PE		INT  NOT NULL,
  ID_PRO     INT         NOT NULL, 
  PRECIO	DECIMAL(6,2) 		NOT NULL CHECK (PRECIO >0),
  CANTIDAD	TINYINT 			NOT NULL CHECK(CANTIDAD >=0),
  FOREIGN KEY (ID_PE) REFERENCES PEDIDO (ID_PE),
  FOREIGN KEY (ID_PRO) REFERENCES PRODUCTOS (ID_PRO)
);

CREATE TABLE BOLETA(
  ID_PE INT NOT NULL,
  ID_BOL CHAR(11) NOT NULL,
  PRETOTAL DECIMAL(6,2) NOT NULL,
  DESCUENTO DECIMAL(6,2) NOT NULL,
  PRIMARY KEY (ID_BOL),
  FOREIGN KEY (ID_PE) REFERENCES DETALLE_PEDIDO (ID_PE)
);

/*PROCEDIMIENTO ALMACENADO PARA EL LISTADO DE LOS EMPLEADOS*/
DROP PROCEDURE IF EXISTS USP_LISTADOEMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_LISTADOEMPLEADO()
BEGIN
SELECT E.ID_EM,E.DNI,E.NOMBRE,E.APELLIDO,E.TELEFONO,E.CORREO,E.USUARIO,E.CLAVE,TE.ID_TP,E.ESTADO,E.IMAGEN FROM EMPLEADO AS E
INNER JOIN TIPOEMPLEADO AS TE
ON E.ID_TP=TE.ID_TP;
END$$
DELIMITER ;


/*PROCEDIMIENTO ALMACENADO PARA INSERTAR EMPLEADOS
DROP PROCEDURE IF EXISTS USP_INSERTAREMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_INSERTAREMPLEADO(
ID INT, DNI CHAR(8), NOM VARCHAR(50), APE VARCHAR(50), TELEF VARCHAR(10),
USU VARCHAR(50), CLAVE VARCHAR(50), TIPO INT, ESTADO TINYINT, IMG VARCHAR(1000)
)
BEGIN

 DECLARE EXIT HANDLER FOR 1062
    BEGIN
 	SELECT CONCAT('LLAVE DUPLICADA DNI = ',DNI,' Y/O USUARIO = ',USU,' CORREGIR') AS MESSAGE;
    END;

INSERT INTO EMPLEADO VALUES(ID,DNI,NOM,APE,TELEF,USU,CLAVE,TIPO,ESTADO,IMG); 
END$$
DELIMITER ;
*/

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR EMPLEADOS*/
DROP PROCEDURE IF EXISTS USP_ACTUALIZAREMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_ACTUALIZAREMPLEADO(
ID INT, DNI CHAR(8), NOM VARCHAR(50), APE VARCHAR(50), TELEF VARCHAR(10),CORREO VARCHAR(100), 
USU VARCHAR(50), CLAVE VARCHAR(50), TIPO INT, ESTADO TINYINT, IMG VARCHAR(1000)
)
BEGIN
UPDATE EMPLEADO SET 
DNI = DNI,
NOMBRE = NOM ,
APELLIDO = APE,
TELEFONO = TELEF, 
CORREO = CORREO,
USUARIO	 = USU,
CLAVE = CLAVE,
ID_TP = TIPO	, 	 
ESTADO = ESTADO  , 
IMAGEN 	= IMG
WHERE ID_EM = ID;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA ELIMINAR EMPLEADOS*/
DROP PROCEDURE IF EXISTS USP_ELIMINAREMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_ELIMINAREMPLEADO(
ID INT
)
BEGIN
UPDATE EMPLEADO SET 
ESTADO = 0 
WHERE ID_EM = ID;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA VALIDAR ACCESO*/
DROP PROCEDURE IF EXISTS USP_VALIDARACCESO;
DELIMITER $$
CREATE PROCEDURE USP_VALIDARACCESO (USR VARCHAR(100), PAS VARCHAR(50))
BEGIN
SELECT * FROM EMPLEADO WHERE (CORREO = USR OR USUARIO = USR) AND CLAVE = PAS AND ESTADO = 1;
END$$
DELIMITER ;


INSERT INTO TIPOEMPLEADO VALUES (1,'admin');
INSERT INTO EMPLEADO VALUES (1,'99999999','Jhon','Doe','999999999','JhonDoe@gmail.com','99999','99999',1,1,'https://i.pinimg.com/originals/b0/82/c0/b082c01b099e8a0e8bd6a50c2b06e135.png');
CALL USP_ACTUALIZAREMPLEADO(1,'99999999','Jhon','Doe','999999999','JhonDoe@gmail.com','99999','99999',1,1,'https://i.pinimg.com/originals/b0/82/c0/b082c01b099e8a0e8bd6a50c2b06e135.png');
CALL USP_ELIMINAREMPLEADO(1);
CALL USP_VALIDARACCESO('JhonDoe@gmail.com','99999');
CALL USP_LISTADOEMPLEADO;
