DROP DATABASE IF EXISTS patito;
CREATE DATABASE patito;
USE patito;

CREATE TABLE TIPOEMPLEADO(
  ID_TP     INT          PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(20)      NOT NULL UNIQUE
  );

CREATE TABLE EMPLEADO(
  ID_EM      INT          PRIMARY KEY AUTO_INCREMENT, 
  DNI   CHAR(8)      NOT NULL UNIQUE,
  NOMBRE    VARCHAR(50)  NOT NULL,
  APELLIDO    VARCHAR(50)  NOT NULL,
  TELEFONO  VARCHAR(10)  NOT NULL UNIQUE,
  DIRECCION VARCHAR(150) NOT NULL,
  CORREO VARCHAR(100) NOT NULL UNIQUE,
  USUARIO	 VARCHAR(50)  NOT NULL UNIQUE,
  CLAVE  VARCHAR(50)  NOT NULL UNIQUE,
  ID_TP	 	  INT		  NOT NULL,
  ESTADO      TINYINT     NOT NULL DEFAULT 1,
  IMAGEN 	VARCHAR(1000) NULL DEFAULT "https://res.cloudinary.com/dfuuywyk9/image/upload/v1621437436/l60Hf_megote.png",
  FOREIGN KEY (ID_TP) REFERENCES TIPOEMPLEADO (ID_TP)
);

CREATE TABLE CLIENTE(
  ID_CLI     INT          PRIMARY KEY AUTO_INCREMENT, 
  DNI_CLI    CHAR(8)      NOT NULL UNIQUE,
  NOM_CLI    VARCHAR(50)  NOT NULL,
  APE_CLI    VARCHAR(50)  NOT NULL,
  TELEF_CLI  VARCHAR(10)  UNIQUE,
  ESTADO      TINYINT         NOT NULL
);

CREATE TABLE CATEGORIA(
  ID_CA     INT          PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(30)      NOT NULL UNIQUE
  );

CREATE TABLE PRODUCTOS(
  ID_PRO     INT    PRIMARY KEY AUTO_INCREMENT, 
  DESCRIPCION    VARCHAR(100)      NOT NULL UNIQUE,
  PRECIO	DECIMAL(6,2) 		NOT NULL CHECK (PRECIO >0),
  CANTIDAD	TINYINT 			NOT NULL CHECK(CANTIDAD >=0),
  ID_CA 	INT		NOT NULL ,
  IMAGEN 	VARCHAR(1000) 		NULL,
  ESTADO TINYINT NOT NULL,
  FOREIGN KEY (ID_CA) REFERENCES CATEGORIA (ID_CA)
);

CREATE TABLE PEDIDO(
  ID_PE     INT    		AUTO_INCREMENT, 
  ID_EM		INT       NOT NULL,
  ID_CLI	INT       NOT NULL,
  FECHA_PE	DATE 	NOT NULL,
  FECHA_EN	DATE	NULL,
  CANTIDAD_TOTAL	TINYINT 			NOT NULL CHECK(CANTIDAD_TOTAL >=0),
  PRIMARY KEY (ID_PE, ID_EM,ID_CLI),
  FOREIGN KEY (ID_EM) REFERENCES EMPLEADO (ID_EM),
  FOREIGN KEY (ID_CLI) REFERENCES CLIENTE (ID_CLI)
);
CREATE TABLE DETALLE_PEDIDO(
  ID_PE		INT  NOT NULL,
  ID_PRO     INT         NOT NULL, 
  PRECIO	DECIMAL(6,2) 		NOT NULL CHECK (PRECIO >0),
  CANTIDAD	TINYINT 			NOT NULL CHECK(CANTIDAD >=0),
  FOREIGN KEY (ID_PE) REFERENCES PEDIDO (ID_PE),
  FOREIGN KEY (ID_PRO) REFERENCES PRODUCTOS (ID_PRO)
);

CREATE TABLE BOLETA(
  ID_PE INT NOT NULL,
  ID_BOL CHAR(11) NOT NULL,
  PRETOTAL DECIMAL(6,2) NOT NULL,
  DESCUENTO DECIMAL(6,2) NOT NULL,
  PRIMARY KEY (ID_BOL),
  FOREIGN KEY (ID_PE) REFERENCES DETALLE_PEDIDO (ID_PE)
);

/*--------------------------FUNCIONES AUTOGENERADAS PARA LA TABLA EMPLEADO--------------------------*/

/*FUNCIÓN AUTOGENERADO DEL CORREO-->EMPLEADO*/
DROP FUNCTION IF EXISTS GENERAR_CORREO;
DELIMITER $$
CREATE FUNCTION GENERAR_CORREO(NOMBRE VARCHAR(50), APELLIDO VARCHAR(50))
RETURNS VARCHAR(50) DETERMINISTIC
	BEGIN
	RETURN CONCAT(LOWER((CONCAT(CONCAT(SUBSTRING(NOMBRE,1,3),SUBSTRING(APELLIDO,1,3)),YEAR(SYSDATE())))),LOWER('@PATITO.COM'));   
    END$$
DELIMITER ;

/*FUNCIÓN AUTOGENERADO DEL USUARIO-->EMPLEADO*/
DROP FUNCTION IF EXISTS GENERAR_USUARIO;
DELIMITER $$
CREATE FUNCTION GENERAR_USUARIO()
RETURNS VARCHAR(50) DETERMINISTIC
	BEGIN
	RETURN CONCAT(CONCAT(LOWER('p'),YEAR(SYSDATE())),FLOOR(RAND()*100)+12000);
    END$$
DELIMITER ;

/*FUNCIÓN AUTOGENERADO DE LA CLAVE-->EMPLEADO*/
DROP FUNCTION IF EXISTS GENERAR_CLAVE;
DELIMITER $$
CREATE FUNCTION GENERAR_CLAVE(IN_LENGTH INT) RETURNS VARCHAR(50) DETERMINISTIC
BEGIN
SET @LEN = 0;
SET @RETURNVALUE = "";
WHILE (@LEN < IN_LENGTH) DO
SET @RANDCHAR = "0";
WHILE (@RANDCHAR IN ("0","1","O","L")) DO
SET @RANDCHAR = (SELECT CHAR(FLOOR(RAND()*10)+48) AS CHR
UNION SELECT CHAR(FLOOR(RAND()*26)+65)
UNION SELECT CHAR(FLOOR(RAND()*26)+97)
ORDER BY RAND() LIMIT 1);
END WHILE;
SET @RETURNVALUE = CONCAT(@RETURNVALUE,@RANDCHAR);
SET @LEN = @LEN + 1;
END WHILE;
RETURN @RETURNVALUE;
END$$
DELIMITER ;
/*--------------------------------------------------------------------------------------------------*/

/*--------------------------PROCEDIMIENTOS ALMACENADOS PARA LA TABLA EMPLEADO-----------------------*/

/*PROCEDURE AUTOGENERADO PARA EL REGISTRO-->EMPLEADO*/
DROP PROCEDURE IF EXISTS REGISTRAR_EMPLEADO;
DELIMITER $$
CREATE PROCEDURE REGISTRAR_EMPLEADO(
DNI CHAR(8), NOM VARCHAR(50), APE VARCHAR(50), TELEF VARCHAR(10), DIRECCION VARCHAR(150),
TIPO INT
)
BEGIN
INSERT INTO EMPLEADO VALUES(NULL,DNI,NOM,APE,TELEF,DIRECCION,GENERAR_CORREO(NOM,APE),GENERAR_USUARIO(),GENERAR_CLAVE(8),TIPO,DEFAULT,DEFAULT); 
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA EL LISTADO DE LOS EMPLEADOS*/
DROP PROCEDURE IF EXISTS USP_LISTADOEMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_LISTADOEMPLEADO()
BEGIN
SELECT E.ID_EM,E.NOMBRE,E.APELLIDO,E.TELEFONO,E.CORREO,TE.DESCRIPCION FROM EMPLEADO AS E
INNER JOIN TIPOEMPLEADO AS TE
ON E.ID_TP=TE.ID_TP;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA ELIMINAR EMPLEADOS*/
DROP PROCEDURE IF EXISTS USP_ELIMINAREMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_ELIMINAREMPLEADO(
ID INT
)
BEGIN
UPDATE EMPLEADO SET 
ESTADO = 0 
WHERE ID_EM = ID;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA VALIDAR ACCESO DEL EMPLEADO*/
DROP PROCEDURE IF EXISTS USP_VALIDARACCESO;
DELIMITER $$
CREATE PROCEDURE USP_VALIDARACCESO (USR VARCHAR(100), PAS VARCHAR(50))
BEGIN
SELECT E.*,TE.DESCRIPCION FROM EMPLEADO AS E
INNER JOIN TIPOEMPLEADO AS TE
ON E.ID_TP=TE.ID_TP
WHERE (CORREO = USR OR USUARIO = USR) AND CLAVE = PAS AND ESTADO = 1;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA LA ACTUALIZACIÓN DEL PERFIL DEL EMPLEADO*/
DROP PROCEDURE IF EXISTS USP_ACTUALIZAREMPLEADO;
DELIMITER $$
CREATE PROCEDURE USP_ACTUALIZAREMPLEADO(NOMBRE VARCHAR(50), APELLIDO VARCHAR(50), TELEFONO VARCHAR(10),
DIRECCION VARCHAR(150), CORREO VARCHAR(50), CLAVE VARCHAR(50), IMAGEN VARCHAR(1000), ID INT)
BEGIN
UPDATE EMPLEADO SET NOMBRE = NOMBRE, APELLIDO = APELLIDO, TELEFONO = TELEFONO, DIRECCION = DIRECCION,
CORREO = CORREO, CLAVE = CLAVE, IMAGEN =IMAGEN WHERE ID_EM=ID;
END$$
DELIMITER ;
/*--------------------------------------------------------------------------------------------------*/

/*PROCEDIMIENTO ALMACENADO PARA EL REGISTRO DE LOS PRODUCTOS*/	
DROP PROCEDURE IF EXISTS USP_REGISTRARPRODUCTO;
DELIMITER $$
CREATE PROCEDURE USP_REGISTRARPRODUCTO()
BEGIN
SELECT P.ID_PRO,P.DESCRIPCION,P.PRECIO,P.CANTIDAD,C.ID_CA,P.IMAGEN,P.ESTADO FROM PRODUCTOS AS P
INNER JOIN CATEGORIAS AS C
ON P.ID_CA=C.ID_CA;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA EL REGISTRO DE LOS PRODUCTOS*/
DROP PROCEDURE IF EXISTS USP_ACTUALIZARPRODUCTO;
DELIMITER $$
CREATE PROCEDURE USP_ACTUALIZARPRODUCTO(IDPROD INT, DESCR VARCHAR(100), PRE DECIMAL(6,2), CANT TINYINT, IDCAT INT, IMG VARCHAR(1000), EST TINYINT)
BEGIN
UPDATE PRODUCTOS SET DESCRIPCION = DESCR, PRECIO = PRE, CANTIDAD = CANT, ID_CA = IDCAT, IMAGEN = IMG, ESTADO=EST WHERE ID_PRO = IDPROD;
END$$
DELIMITER ;

/*PROCEDIMIENTO ALMACENADO PARA ELIMINAR PRODUCTOS*/
DROP PROCEDURE IF EXISTS USP_ELIMINARPRODUCTO;
DELIMITER $$
CREATE PROCEDURE USP_ELIMINARPRODUCTO(IDPRO INT)
BEGIN
UPDATE PRODUCTOS SET ESTADO = 0 WHERE ID_PROD = IDPRO;
END$$
DELIMITER ;

INSERT INTO TIPOEMPLEADO VALUES (1,'Administrador(a)');
INSERT INTO TIPOEMPLEADO VALUES (2,'Recepcionista');
INSERT INTO TIPOEMPLEADO VALUES (3,'Chef');
INSERT INTO TIPOEMPLEADO VALUES (4,'Mesero(a)');
INSERT INTO TIPOEMPLEADO VALUES (5,'Repartidor(a)');

SELECT * FROM EMPLEADO;